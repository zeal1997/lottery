{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nexport default {\n  data() {\n    return {\n      rotateDegree: 0,\n      isSpinning: false,\n      spinningTime: 5000\n    };\n  },\n  computed: {\n    availablePrizes() {\n      return this.$store.state.prizes.filter(p => p.count > 0);\n    },\n    hasDrawn() {\n      return this.$store.state.hasDrawn;\n    },\n    winningPrize() {\n      return this.$store.state.winningPrize;\n    }\n  },\n  methods: {\n    getSectorStyle(index) {\n      const angle = 360 / this.availablePrizes.length;\n      const startAngle = index * angle;\n      const endAngle = startAngle + angle;\n      const midAngle = (startAngle + endAngle) / 2 * Math.PI / 180;\n      const radius = 100;\n      const textOffset = 70;\n      const textAngle = midAngle * 180 / Math.PI;\n      return {\n        transform: `rotate(${startAngle}deg)`,\n        clipPath: `polygon(50% 50%, 50% 0%, ${50 + radius * Math.cos(midAngle)}% ${50 - radius * Math.sin(midAngle)}%)`,\n        backgroundColor: `hsl(${index * 45 % 360}, 70%, 60%)`\n      };\n    },\n    startDraw() {\n      this.isSpinning = true;\n      this.rotateDegree += 360 * 5 + Math.random() * 360; // 旋转5圈以上\n\n      // 抽奖结束后处理\n      setTimeout(() => {\n        this.isSpinning = false;\n        this.$store.dispatch('drawPrize');\n      }, this.spinningTime);\n    },\n    closeResult() {\n      this.$router.push('/result');\n    }\n  }\n};","map":{"version":3,"names":["data","rotateDegree","isSpinning","spinningTime","computed","availablePrizes","$store","state","prizes","filter","p","count","hasDrawn","winningPrize","methods","getSectorStyle","index","angle","length","startAngle","endAngle","midAngle","Math","PI","radius","textOffset","textAngle","transform","clipPath","cos","sin","backgroundColor","startDraw","random","setTimeout","dispatch","closeResult","$router","push"],"sources":["/Users/jackie/Documents/vue/lottery/src/components/LotteryWheel.vue"],"sourcesContent":["<template>\n  <div class=\"lottery-container\">\n    <h2>幸运大转盘</h2>\n    <div class=\"wheel-wrapper\">\n      <div class=\"wheel\" :style=\"wheelStyle\" :class=\"{ spinning: isSpinning }\">\n        <!-- 转盘扇区 -->\n        <div v-for=\"(prize, index) in availablePrizes\" :key=\"prize.id\" class=\"wheel-sector\" :style=\"getSectorStyle(index)\">\n          <span class=\"prize-name\">{{ prize.name }}</span>\n        </div>\n        <div class=\"wheel-pointer\"></div>\n      </div>\n    </div>\n    <button class=\"draw-btn\" @click=\"startDraw\" :disabled=\"isSpinning || hasDrawn\">\n      {{ isSpinning ? '抽奖中...' : '开始抽奖' }}\n    </button>\n    <!-- 中奖弹窗 -->\n    <div v-if=\"winningPrize\" class=\"result-modal\">\n      <div class=\"modal-content\">\n        <h3>恭喜您中奖了！</h3>\n        <p>奖品：{{ winningPrize.name }}</p>\n        <button @click=\"closeResult\">确定</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() { return { rotateDegree: 0, isSpinning: false, spinningTime: 5000 }},\n  computed: {\n    availablePrizes() { return this.$store.state.prizes.filter(p => p.count > 0) },\n    hasDrawn() { return this.$store.state.hasDrawn },\n    winningPrize() { return this.$store.state.winningPrize }\n  },\n  methods: {\n    getSectorStyle(index) {\n      const angle = 360 / this.availablePrizes.length\n      const startAngle = index * angle\n      const endAngle = startAngle + angle\n      const midAngle = (startAngle + endAngle) / 2 * Math.PI / 180\n      const radius = 100\n      const textOffset = 70\n      const textAngle = midAngle * 180 / Math.PI\n\n      return {\n        transform: `rotate(${startAngle}deg)`,\n        clipPath: `polygon(50% 50%, 50% 0%, ${50 + radius * Math.cos(midAngle)}% ${50 - radius * Math.sin(midAngle)}%)`,\n        backgroundColor: `hsl(${(index * 45) % 360}, 70%, 60%)`\n      }\n    },\n    startDraw() {\n      this.isSpinning = true\n      this.rotateDegree += 360 * 5 + Math.random() * 360 // 旋转5圈以上\n\n      // 抽奖结束后处理\n      setTimeout(() => {\n        this.isSpinning = false\n        this.$store.dispatch('drawPrize')\n      }, this.spinningTime)\n    },\n    closeResult() { this.$router.push('/result') }\n  }\n}\n</script>\n\n<style scoped>\n.lottery-container {\n  text-align: center;\n  padding: 20px;\n}\n\n.wheel-wrapper {\n  position: relative;\n  width: 300px;\n  height: 300px;\n  margin: 0 auto;\n}\n\n.wheel {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  position: relative;\n  transition: transform 5s cubic-bezier(0.2, 0.8, 0.2, 1);\n  border: 5px solid #42b983;\n  overflow: hidden;\n}\n\n.wheel-sector {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  transform-origin: center bottom;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.prize-name {\n  position: absolute;\n  top: 20px;\n  width: 100px;\n  text-align: center;\n  transform-origin: center bottom;\n  font-size: 12px;\n  font-weight: bold;\n  color: #fff;\n  text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\n}\n\n.wheel-pointer {\n  position: absolute;\n  top: -15px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 30px;\n  height: 30px;\n  background-color: #ff4d4f;\n  clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n  z-index: 10;\n}\n\n.draw-btn {\n  margin-top: 30px;\n  padding: 10px 30px;\n  background-color: #42b983;\n  color: white;\n  border: none;\n  border-radius: 20px;\n  font-size: 16px;\n  cursor: pointer;\n  outline: none;\n}\n\n.draw-btn:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n}\n\n.result-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 30px;\n  border-radius: 10px;\n  text-align: center;\n}\n\n.modal-content button {\n  margin-top: 20px;\n  padding: 8px 20px;\n  background-color: #42b983;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n</style>"],"mappings":";;;AA2BA,eAAe;EACbA,IAAIA,CAAA,EAAG;IAAE,OAAO;MAAEC,YAAY,EAAE,CAAC;MAAEC,UAAU,EAAE,KAAK;MAAEC,YAAY,EAAE;IAAK,CAAC;EAAA,CAAC;EAC3EC,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAAE,OAAO,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM,CAACC,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,KAAI,GAAI,CAAC;IAAE,CAAC;IAC9EC,QAAQA,CAAA,EAAG;MAAE,OAAO,IAAI,CAACN,MAAM,CAACC,KAAK,CAACK,QAAO;IAAE,CAAC;IAChDC,YAAYA,CAAA,EAAG;MAAE,OAAO,IAAI,CAACP,MAAM,CAACC,KAAK,CAACM,YAAW;IAAE;EACzD,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAACC,KAAK,EAAE;MACpB,MAAMC,KAAI,GAAI,GAAE,GAAI,IAAI,CAACZ,eAAe,CAACa,MAAK;MAC9C,MAAMC,UAAS,GAAIH,KAAI,GAAIC,KAAI;MAC/B,MAAMG,QAAO,GAAID,UAAS,GAAIF,KAAI;MAClC,MAAMI,QAAO,GAAI,CAACF,UAAS,GAAIC,QAAQ,IAAI,IAAIE,IAAI,CAACC,EAAC,GAAI,GAAE;MAC3D,MAAMC,MAAK,GAAI,GAAE;MACjB,MAAMC,UAAS,GAAI,EAAC;MACpB,MAAMC,SAAQ,GAAIL,QAAO,GAAI,GAAE,GAAIC,IAAI,CAACC,EAAC;MAEzC,OAAO;QACLI,SAAS,EAAE,UAAUR,UAAU,MAAM;QACrCS,QAAQ,EAAE,4BAA4B,EAAC,GAAIJ,MAAK,GAAIF,IAAI,CAACO,GAAG,CAACR,QAAQ,CAAC,KAAK,EAAC,GAAIG,MAAK,GAAIF,IAAI,CAACQ,GAAG,CAACT,QAAQ,CAAC,IAAI;QAC/GU,eAAe,EAAE,OAAQf,KAAI,GAAI,EAAE,GAAI,GAAG;MAC5C;IACF,CAAC;IACDgB,SAASA,CAAA,EAAG;MACV,IAAI,CAAC9B,UAAS,GAAI,IAAG;MACrB,IAAI,CAACD,YAAW,IAAK,GAAE,GAAI,IAAIqB,IAAI,CAACW,MAAM,CAAC,IAAI,GAAE,EAAE;;MAEnD;MACAC,UAAU,CAAC,MAAM;QACf,IAAI,CAAChC,UAAS,GAAI,KAAI;QACtB,IAAI,CAACI,MAAM,CAAC6B,QAAQ,CAAC,WAAW;MAClC,CAAC,EAAE,IAAI,CAAChC,YAAY;IACtB,CAAC;IACDiC,WAAWA,CAAA,EAAG;MAAE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,SAAS;IAAE;EAC/C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}